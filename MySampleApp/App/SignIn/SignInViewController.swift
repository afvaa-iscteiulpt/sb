//
//  SignInViewController.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.13
//
//

import UIKit
import AWSMobileHubHelper
import FBSDKLoginKit
import AWSFacebookSignIn

class SignInViewController: UIViewController {
    @IBOutlet weak var anchorView: UIView!

    @IBOutlet weak var facebookButton: UIButton!

// Support code for Google provider UI.
    @IBOutlet weak var googleButton: UIButton!

    @IBOutlet weak var customProviderButton: UIButton!
    @IBOutlet weak var customCreateAccountButton: UIButton!
    @IBOutlet weak var customForgotPasswordButton: UIButton!
    @IBOutlet weak var customUserIdField: UITextField!
    @IBOutlet weak var customPasswordField: UITextField!
    @IBOutlet weak var leftHorizontalBar: UIView!
    @IBOutlet weak var rightHorizontalBar: UIView!
    @IBOutlet weak var orSignInWithLabel: UIView!
    
    @IBOutlet weak var buttonBackToTutorial:UIButton?
    
    @IBAction func buttonBackToTutorial(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
    
    @IBOutlet weak var buttonSkip: UIButton!
    @IBAction func skipToMain(_ sender: Any) {
        let presentationViewController = self.presentingViewController
        self.dismiss(animated: false, completion:
            {
                presentationViewController!.dismiss(animated: true, completion: nil)
            })
    }

    var tutorial = false
    
    var passwordAuthenticationCompletion: AWSTaskCompletionSource<AnyObject>?
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        if(!tutorial) {
            buttonSkip.isHidden = true
        }
        
        print("Sign In Loading.")

                // Facebook login permissions can be optionally set, but must be set
                // before user authenticates.
                AWSFacebookSignInProvider.sharedInstance().setPermissions(["public_profile"]);
                
                // Facebook login behavior can be optionally set, but must be set
                // before user authenticates.
//                AWSFacebookSignInProvider.sharedInstance().setLoginBehavior(FBSDKLoginBehavior.Web.rawValue)
                
                // Facebook UI Setup
                let facebookComponent = AWSFacebookSignInButton(frame: CGRect(x: 0, y: 0, width: facebookButton.frame.size.width, height: facebookButton.frame.size.height))
                facebookComponent.buttonStyle = .large
                facebookComponent.delegate = self
                facebookButton.addSubview(facebookComponent)
                
                view.addConstraint(NSLayoutConstraint(item: facebookButton, attribute: .top, relatedBy: .equal, toItem: anchorViewForFacebook(), attribute: .bottom, multiplier: 1, constant: 8.0))
                googleButton.removeFromSuperview()
                // Custom UI Setup
                customProviderButton.addTarget(self, action: #selector(self.handleCustomSignIn), for: .touchUpInside)
                customCreateAccountButton.addTarget(self, action: #selector(self.handleUserPoolSignUp), for: .touchUpInside)
                customForgotPasswordButton.addTarget(self, action: #selector(self.handleUserPoolForgotPassword), for: .touchUpInside)
                customProviderButton.setImage(UIImage(named: "LoginButton"), for: UIControlState())
    }
    
    func dimissController() {
        self.dismiss(animated: true, completion: nil)
    }
    
    // MARK: - Utility Methods
    
    func handleLoginWithSignInProvider(_ signInProvider: AWSSignInProvider) {
        AWSSignInManager.sharedInstance().login(signInProviderKey: signInProvider.identityProviderName, completionHandler: {(result: Any?, authState: AWSIdentityManagerAuthState, error: Error?) in
            print("result = \(result), error = \(error)")
            // If no error reported by SignInProvider, discard the sign-in view controller.
            guard let _ = result else {
                self.showErrorDialog(signInProvider.identityProviderName, withError: error as! NSError)
                return
            }
            
            self.dimissController()
        })
    }

    func showErrorDialog(_ loginProviderName: String, withError error: NSError) {
         print("\(loginProviderName) failed to sign in w/ error: \(error)")
        let alertController = UIAlertController(title: NSLocalizedString("Sign-in Provider Sign-In Error", comment: "Sign-in error for sign-in failure."), message: NSLocalizedString("\(loginProviderName) failed to sign in w/ error: \(error)", comment: "Sign-in message structure for sign-in failure."), preferredStyle: .alert)
        let doneAction = UIAlertAction(title: NSLocalizedString("Cancel", comment: "Label to cancel sign-in failure."), style: .cancel, handler: nil)
        alertController.addAction(doneAction)
        present(alertController, animated: true, completion: nil)
    }

    // MARK: - IBActions

    func anchorViewForFacebook() -> UIView {
            return orSignInWithLabel
    }
    
}

extension SignInViewController: AWSSignInDelegate {
    
    func onLogin(signInProvider: AWSSignInProvider, result: Any?, authState: AWSIdentityManagerAuthState, error: Error?) {
        
        guard let _ = result else {
            self.showErrorDialog(signInProvider.identityProviderName, withError: error as! NSError)
            return
        }
        self.dimissController()
    }
}
